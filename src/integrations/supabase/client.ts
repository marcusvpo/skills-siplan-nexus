// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { debugSupabaseClient } from '@/utils/authDebug';

const SUPABASE_URL = "https://bnulocsnxiffavvabfdj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "sb_publishable_Qf2Fc0CgFvljfVhk3v9IYg_PrDm9z4J.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJudWxvY3NueGlmZmF2dmFiZmRqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzM1NTMsImV4cCI6MjA2NjQ0OTU1M30.3QeKQtbvTN4KQboUKhqOov16HZvz-xVLxmhl70S2IAE";

// Singleton pattern: Uma √∫nica inst√¢ncia do cliente Supabase
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

// Fun√ß√£o para obter a inst√¢ncia √∫nica com interceptor global
const getSupabaseInstance = () => {
  if (!supabaseInstance) {
    console.log('üîß [Supabase] Creating single client instance');
    
    // Override global fetch para adicionar JWT a todos os requests para Supabase
    const originalFetch = global.fetch;
    global.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {
      const url = typeof input === 'string' ? input : input.toString();
      
      if (url.includes('bnulocsnxiffavvabfdj.supabase.co')) {
        const token = localStorage.getItem('siplan-auth-token');
        const headers = new Headers(init?.headers);
        
        if (token) {
          headers.set('Authorization', `Bearer ${token}`);
          console.log('üîê [Supabase Fetch] Added Authorization header with JWT for URL:', url);
        } else {
          console.warn('‚ö†Ô∏è [Supabase Fetch] No JWT in localStorage for URL:', url);
        }
        
        return originalFetch(input, { ...init, headers });
      }
      
      return originalFetch(input, init);
    };
    
    supabaseInstance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: false,  // Desativado para JWT customizado
        autoRefreshToken: false,
        detectSessionInUrl: false,
      },
      global: {
        headers: {
          'x-client-info': 'supabase-js-web/2.50.2'
        },
      },
    });
    
    debugSupabaseClient();
  }
  return supabaseInstance;
};

// Export da inst√¢ncia √∫nica
export const supabase = getSupabaseInstance();

// Fun√ß√µes para gerenciar token
export const setAuthToken = (token: string) => {
  console.log('üîê [AuthToken] Setting JWT in localStorage');
  localStorage.setItem('siplan-auth-token', token);
};

export const clearAuthToken = () => {
  console.log('üîê [AuthToken] Clearing JWT from localStorage');
  localStorage.removeItem('siplan-auth-token');
};

// Fun√ß√µes de compatibilidade
export const setCartorioAuthContext = (token: string) => {
  setAuthToken(token);
};

export const clearCartorioAuthContext = () => {
  clearAuthToken();
};

export const getAuthenticatedClient = () => {
  return getSupabaseInstance();
};

export const createAuthenticatedClient = (token: string) => {
  setAuthToken(token);
  return getAuthenticatedClient();
};

export const setCustomAuthToken = (token: string) => {
  setAuthToken(token);
};

export const clearCustomAuthToken = () => {
  clearAuthToken();
};
