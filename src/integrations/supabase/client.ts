
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bnulocsnxiffavvabfdj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJudWxvY3NueGlmZmF2dmFiZmRqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzM1NTMsImV4cCI6MjA2NjQ0OTU1M30.3QeKQtbvTN4KQboUKhqOov16HZvz-xVLxmhl70S2IAE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false, // Disable default auth since we use custom tokens
    autoRefreshToken: false,
  },
  global: {
    headers: {},
  },
});

// Function to set custom JWT token for cartorio authentication
export const setCustomAuthToken = (token: string) => {
  // This function is kept for backward compatibility but deprecated
  // Use createAuthenticatedClient instead for new implementations
  console.log('Setting custom auth token:', token);
};

// Function to clear custom auth token
export const clearCustomAuthToken = () => {
  // This function is kept for backward compatibility but deprecated
  // Use createAuthenticatedClient instead for new implementations
  console.log('Clearing custom auth token');
};

// Helper function to create authenticated supabase instance
export const createAuthenticatedClient = (token: string) => {
  console.log('üîê [createAuthenticatedClient] Creating client with token type:', token.startsWith('CART-') ? 'CART token' : 'Other token');
  
  // Para tokens de cart√≥rio (CART-), usar Authorization header diretamente
  // A fun√ß√£o get_current_cartorio_id() espera o token no Authorization header
  if (token.startsWith('CART-')) {
    return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: false,
        autoRefreshToken: false,
      },
      global: {
        headers: {
          'Authorization': `Bearer ${token}`, // Usar Authorization header para compatibilidade com RLS
        },
      },
    });
  }
  
  // For proper JWT tokens, use Authorization header
  return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      persistSession: false,
      autoRefreshToken: false,
    },
    global: {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    },
  });
};
