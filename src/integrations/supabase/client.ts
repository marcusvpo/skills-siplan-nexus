// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { debugSupabaseClient } from '@/utils/authDebug';

const SUPABASE_URL = "https://bnulocsnxiffavvabfdj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "sb_publishable_Qf2Fc0CgFvljfVhk3v9IYg_PrDm9z4J";

// ✅ Singleton pattern: Uma única instância do cliente Supabase
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;
let isInterceptorConfigured = false;

// ✅ Configuração do interceptor uma única vez
const configureRequestInterceptor = () => {
  if (isInterceptorConfigured) {
    console.log('🔧 [Supabase] Interceptor já configurado, pulando...');
    return;
  }

  console.log('🔧 [Supabase] Configurando interceptor de requisições...');
  
  // ✅ Salvar referência original do fetch apenas uma vez
  const originalFetch = window.fetch;
  
  // ✅ Interceptor mais seguro - só para URLs do Supabase
  window.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {
    const url = typeof input === 'string' ? input : 
                input instanceof URL ? input.toString() : 
                input.url;
    
    // ✅ Só intercepta chamadas para sua instância do Supabase
    if (url.includes('bnulocsnxiffavvabfdj.supabase.co/rest/') || 
        url.includes('bnulocsnxiffavvabfdj.supabase.co/functions/')) {
      
      const token = localStorage.getItem('siplan-auth-token');
      const headers = new Headers(init?.headers);
      
      if (token && !headers.has('Authorization')) {
        headers.set('Authorization', `Bearer ${token}`);
        console.log('🔐 [Supabase] JWT adicionado ao header para:', url.substring(0, 80) + '...');
      }
      
      return originalFetch(input, { ...init, headers });
    }
    
    // ✅ Para outras URLs, usar fetch original
    return originalFetch(input, init);
  };
  
  isInterceptorConfigured = true;
  console.log('✅ [Supabase] Interceptor configurado com sucesso');
};

// ✅ Função para obter a instância única
const getSupabaseInstance = () => {
  if (!supabaseInstance) {
    console.log('🔧 [Supabase] Criando instância única do cliente...');
    
    // ✅ Configurar interceptor apenas uma vez
    configureRequestInterceptor();
    
    supabaseInstance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: false,  // ✅ JWT customizado
        autoRefreshToken: false,
        detectSessionInUrl: false,
        flowType: 'pkce', // ✅ Mais seguro para SPAs
      },
      global: {
        headers: {
          'x-client-info': 'siplan-web-client/1.0.0', // ✅ Identificador customizado
        },
      },
      realtime: {
        params: {
          eventsPerSecond: 10, // ✅ Controle de performance
        },
      },
    });
    
    debugSupabaseClient();
    console.log('✅ [Supabase] Cliente configurado com sucesso');
  }
  return supabaseInstance;
};

// ✅ Export da instância única
export const supabase = getSupabaseInstance();

// ✅ Funções de gestão de token simplificadas
export const setAuthToken = (token: string) => {
  console.log('🔐 [AuthToken] Salvando JWT no localStorage');
  localStorage.setItem('siplan-auth-token', token);
};

export const clearAuthToken = () => {
  console.log('🔐 [AuthToken] Removendo JWT do localStorage');
  localStorage.removeItem('siplan-auth-token');
};

export const getAuthToken = (): string | null => {
  return localStorage.getItem('siplan-auth-token');
};

// ✅ Funções de compatibilidade (aliases)
export const setCartorioAuthContext = setAuthToken;
export const clearCartorioAuthContext = clearAuthToken;
export const getAuthenticatedClient = getSupabaseInstance;
export const createAuthenticatedClient = (token: string) => {
  setAuthToken(token);
  return getSupabaseInstance();
};
export const setCustomAuthToken = setAuthToken;
export const clearCustomAuthToken = clearAuthToken;

// ✅ Função para resetar completamente (útil para testes)
export const resetSupabaseClient = () => {
  console.log('🔄 [Supabase] Resetando cliente...');
  supabaseInstance = null;
  isInterceptorConfigured = false;
  clearAuthToken();
};
