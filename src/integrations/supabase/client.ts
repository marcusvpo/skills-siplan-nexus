
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bnulocsnxiffavvabfdj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJudWxvY3NueGlmZmF2dmFiZmRqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzM1NTMsImV4cCI6MjA2NjQ0OTU1M30.3QeKQtbvTN4KQboUKhqOov16HZvz-xVLxmhl70S2IAE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false, // Disable default auth since we use custom tokens
    autoRefreshToken: false,
  },
  global: {
    headers: {},
  },
});

// Cache para evitar m√∫ltiplas inst√¢ncias do GoTrueClient
const clientCache = new Map<string, ReturnType<typeof createClient>>();

// Helper function to create authenticated supabase instance
export const createAuthenticatedClient = (token: string) => {
  console.log('üîê [createAuthenticatedClient] Creating client with token:', token.substring(0, 20) + '...');
  
  // Validar se o token √© um JWT v√°lido (deve ter 3 partes separadas por pontos)
  if (!token || typeof token !== 'string') {
    console.error('‚ùå [createAuthenticatedClient] Invalid token: token is null or not a string');
    throw new Error('Token inv√°lido: token √© nulo ou n√£o √© uma string');
  }

  // Para tokens de cart√≥rio que come√ßam com CART-, usar como custom header
  if (token.startsWith('CART-')) {
    console.log('üè¢ [createAuthenticatedClient] Creating cartorio client with custom token');
    
    const cacheKey = `cart_${token.slice(0, 15)}`;
    if (clientCache.has(cacheKey)) {
      console.log('üîÑ [createAuthenticatedClient] Using cached cartorio client');
      return clientCache.get(cacheKey)!;
    }
    
    const client = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: false,
        autoRefreshToken: false,
      },
      global: {
        headers: {
          'Authorization': `Bearer ${token}`,
          'X-Custom-Auth': token,
        },
      },
    });
    
    clientCache.set(cacheKey, client);
    
    // Limpar cache ap√≥s 5 minutos
    setTimeout(() => {
      clientCache.delete(cacheKey);
    }, 5 * 60 * 1000);
    
    return client;
  }

  // Para JWT tokens regulares, validar formato
  const jwtParts = token.split('.');
  if (jwtParts.length !== 3) {
    console.error('‚ùå [createAuthenticatedClient] Invalid JWT format: expected 3 parts, got', jwtParts.length);
    console.error('‚ùå [createAuthenticatedClient] Token parts:', jwtParts);
    throw new Error(`Token JWT inv√°lido: esperado 3 partes, recebido ${jwtParts.length} partes`);
  }

  // Verificar se cada parte do JWT n√£o est√° vazia
  if (jwtParts.some(part => !part || part.trim() === '')) {
    console.error('‚ùå [createAuthenticatedClient] JWT has empty parts');
    throw new Error('Token JWT inv√°lido: cont√©m partes vazias');
  }

  console.log('üîë [createAuthenticatedClient] Creating JWT client with valid token');
  
  const cacheKey = `jwt_${jwtParts[2].slice(-10)}`;
  if (clientCache.has(cacheKey)) {
    console.log('üîÑ [createAuthenticatedClient] Using cached JWT client');
    return clientCache.get(cacheKey)!;
  }
  
  const client = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
    auth: {
      persistSession: false,
      autoRefreshToken: false,
    },
    global: {
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    },
  });
  
  clientCache.set(cacheKey, client);
  
  // Limpar cache ap√≥s 30 minutos para JWT tokens
  setTimeout(() => {
    clientCache.delete(cacheKey);
  }, 30 * 60 * 1000);
  
  return client;
};

// Function to set custom JWT token for cartorio authentication
export const setCustomAuthToken = (token: string) => {
  console.log('Setting custom auth token:', token.substring(0, 20) + '...');
};

// Function to clear custom auth token
export const clearCustomAuthToken = () => {
  console.log('Clearing custom auth token');
  clientCache.clear();
};
