
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bnulocsnxiffavvabfdj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJudWxvY3NueGlmZmF2dmFiZmRqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzM1NTMsImV4cCI6MjA2NjQ0OTU1M30.3QeKQtbvTN4KQboUKhqOov16HZvz-xVLxmhl70S2IAE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false, // Disable default auth since we use custom tokens
    autoRefreshToken: false,
  },
  global: {
    headers: {},
  },
});

// Cache para evitar m√∫ltiplas inst√¢ncias do GoTrueClient
const clientCache = new Map<string, ReturnType<typeof createClient>>();

// Helper function to create authenticated supabase instance
export const createAuthenticatedClient = (token: string) => {
  console.log('üîê [createAuthenticatedClient] Creating client with token type:', token.startsWith('CART-') ? 'CART token' : 'Other token');
  
  // Use cache para evitar m√∫ltiplas inst√¢ncias
  const cacheKey = `auth_${token.slice(0, 10)}`;
  if (clientCache.has(cacheKey)) {
    console.log('üîÑ [createAuthenticatedClient] Using cached client');
    return clientCache.get(cacheKey)!;
  }
  
  let client;
  
  // Para tokens de cart√≥rio, usar tanto Authorization quanto X-Custom-Auth headers
  if (token.startsWith('CART-')) {
    console.log('üè¢ [createAuthenticatedClient] Creating cartorio client with custom headers');
    client = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: false,
        autoRefreshToken: false,
      },
      global: {
        headers: {
          'Authorization': `Bearer ${token}`,
          'X-Custom-Auth': token, // Header adicional para RLS
        },
      },
    });
  } else {
    // Para JWT tokens regulares
    console.log('üîë [createAuthenticatedClient] Creating JWT client');
    client = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: false,
        autoRefreshToken: false,
      },
      global: {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      },
    });
  }
  
  // Cache the client
  clientCache.set(cacheKey, client);
  
  // Limpar cache ap√≥s 5 minutos para evitar tokens expirados
  setTimeout(() => {
    clientCache.delete(cacheKey);
  }, 5 * 60 * 1000);
  
  return client;
};

// Function to set custom JWT token for cartorio authentication
export const setCustomAuthToken = (token: string) => {
  console.log('Setting custom auth token:', token);
};

// Function to clear custom auth token
export const clearCustomAuthToken = () => {
  console.log('Clearing custom auth token');
  clientCache.clear();
};
