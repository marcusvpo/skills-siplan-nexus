// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types'; // Verifique o caminho relativo correto
import { debugSupabaseClient } from '@/utils/authDebug';

const SUPABASE_URL = "https://bnulocsnxiffavvabfdj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "sb_publishable_Qf2Fc0CgFvljfVhk3v9IYg_PrDm9z4J";

// Singleton pattern: garantindo uma única instância do cliente Supabase
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;
let isInterceptorConfigured = false;

const configureRequestInterceptor = () => {
  if (isInterceptorConfigured) {
    console.log('🔧 [Supabase] Interceptor já configurado, pulando...');
    return;
  }

  console.log('🔧 [Supabase] Configurando interceptor de requisições...');

  const originalFetch = window.fetch;

  window.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {
    const url = typeof input === 'string' ? input : 
                input instanceof URL ? input.toString() : 
                (input as any).url;

    // Intercepta chamadas somente para sua instância Supabase (API REST e Functions)
    if (url.includes('bnulocsnxiffavvabfdj.supabase.co/rest/') || 
        url.includes('bnulocsnxiffavvabfdj.supabase.co/functions/')) {

      const headers = new Headers(init?.headers);

      // Para Edge Functions, usar JWT admin se disponível
      if (url.includes('/functions/v1/')) {
        const adminJWT = localStorage.getItem('admin_jwt');
        if (adminJWT && !headers.has('Authorization')) {
          headers.set('Authorization', `Bearer ${adminJWT}`);
          console.log(`🔐 [Supabase] Admin JWT aplicado para: ${url.substring(0, 80)}...`);
        }
      }
      // Para queries diretas REST, usar token do cartório
      else {
        const token = localStorage.getItem('siplan-auth-token');
        if (token && !headers.has('Authorization')) {
          headers.set('Authorization', `Bearer ${token}`);
          console.log(`🔐 [Supabase] Cartório JWT aplicado para: ${url.substring(0, 80)}...`);
        }
      }

      return originalFetch(input, { ...init, headers });
    }

    // Para outras URLs, usar fetch original normalmente
    return originalFetch(input, init);
  };

  isInterceptorConfigured = true;
  console.log('✅ [Supabase] Interceptor configurado com sucesso');
};

const getSupabaseInstance = () => {
  if (!supabaseInstance) {
    console.log('🔧 [Supabase] Criando instância única do cliente...');

    configureRequestInterceptor();

    supabaseInstance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: false,
        autoRefreshToken: false,
        detectSessionInUrl: false,
        flowType: 'pkce', // Mais seguro para SPAs
      },
      global: {
        headers: {
          'x-client-info': 'siplan-web-client/1.0.0',
        },
      },
      realtime: {
        params: {
          eventsPerSecond: 10,
        },
      },
    });

    debugSupabaseClient();
    console.log('✅ [Supabase] Cliente configurado com sucesso');
  }

  return supabaseInstance;
};

export const supabase = getSupabaseInstance();

export const setAuthToken = (token: string) => {
  console.log('🔐 [AuthToken] Salvando JWT no localStorage');
  localStorage.setItem('siplan-auth-token', token);
};

export const clearAuthToken = () => {
  console.log('🔐 [AuthToken] Removendo JWT do localStorage');
  localStorage.removeItem('siplan-auth-token');
};

export const clearAdminToken = () => {
  console.log('🔐 [AdminToken] Removendo JWT admin do localStorage');
  localStorage.removeItem('admin_jwt');
};

export const getAuthToken = (): string | null => {
  return localStorage.getItem('siplan-auth-token');
};

// Funções aliases para compatibilidade
export const setCartorioAuthContext = setAuthToken;
export const clearCartorioAuthContext = clearAuthToken;
export const getAuthenticatedClient = getSupabaseInstance;

export const createAuthenticatedClient = (token: string) => {
  setAuthToken(token);
  return getSupabaseInstance();
};
export const setCustomAuthToken = setAuthToken;
export const clearCustomAuthToken = clearAuthToken;

// Função para resetar cliente (útil em testes)
export const resetSupabaseClient = () => {
  console.log('🔄 [Supabase] Resetando cliente...');
  supabaseInstance = null;
  isInterceptorConfigured = false;
  clearAuthToken();
  clearAdminToken();
};
