
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bnulocsnxiffavvabfdj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJudWxvY3NueGlmZmF2dmFiZmRqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzM1NTMsImV4cCI6MjA2NjQ0OTU1M30.3QeKQtbvTN4KQboUKhqOov16HZvz-xVLxmhl70S2IAE";

// Singleton pattern: Uma 칰nica inst칙ncia do cliente Supabase para toda a aplica칞칚o
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

// Fun칞칚o para obter a inst칙ncia 칰nica do cliente Supabase
const getSupabaseInstance = () => {
  if (!supabaseInstance) {
    console.log('游댢 [Supabase] Creating single client instance');
    supabaseInstance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        persistSession: true, // Mant칠m a sess칚o persistente para admins
        autoRefreshToken: true, // Auto-refresh de tokens
        detectSessionInUrl: true,
      },
      global: {
        headers: {},
      },
    });
  }
  return supabaseInstance;
};

// Export da inst칙ncia 칰nica
export const supabase = getSupabaseInstance();

// Sistema de gerenciamento de contexto de autentica칞칚o para cart칩rios
class AuthContextManager {
  private currentToken: string | null = null;
  private currentHeaders: Record<string, string> = {};

  setCartorioContext(token: string) {
    console.log('游댏 [AuthContext] Setting cartorio context with token type:', token.startsWith('CART-') ? 'CART token' : 'Other token');
    
    this.currentToken = token;
    this.currentHeaders = {};
    
    // Para tokens de cart칩rio, configurar headers customizados
    if (token.startsWith('CART-')) {
      this.currentHeaders = {
        'Authorization': `Bearer ${token}`,
        'X-Custom-Auth': token,
      };
    } else {
      this.currentHeaders = {
        'Authorization': `Bearer ${token}`,
      };
    }
  }

  clearContext() {
    console.log('游댏 [AuthContext] Clearing cartorio context');
    this.currentToken = null;
    this.currentHeaders = {};
  }

  getHeaders(): Record<string, string> {
    return { ...this.currentHeaders };
  }

  hasContext(): boolean {
    return this.currentToken !== null;
  }

  getCurrentToken(): string | null {
    return this.currentToken;
  }
}

// Inst칙ncia 칰nica do gerenciador de contexto
const authContextManager = new AuthContextManager();

// Fun칞칚o para configurar o contexto de autentica칞칚o de cart칩rio
export const setCartorioAuthContext = (token: string) => {
  authContextManager.setCartorioContext(token);
};

// Fun칞칚o para limpar o contexto de autentica칞칚o de cart칩rio
export const clearCartorioAuthContext = () => {
  authContextManager.clearContext();
};

// Fun칞칚o para obter cliente com contexto de autentica칞칚o apropriado
export const getAuthenticatedClient = () => {
  const client = getSupabaseInstance();
  
  // Se h치 contexto de cart칩rio, aplicar headers
  if (authContextManager.hasContext()) {
    const headers = authContextManager.getHeaders();
    console.log('游댏 [AuthContext] Applying cartorio headers to request');
    
    // Retorna uma vers칚o do cliente com headers customizados
    return {
      ...client,
      from: (table: string) => {
        return client.from(table).select('*', { 
          head: false,
          headers 
        });
      },
      rpc: (fn: string, args?: any) => {
        return client.rpc(fn, args, { headers });
      }
    };
  }
  
  // Para casos padr칚o (admin), retorna o cliente normal
  return client;
};

// Helper function compat칤vel com o c칩digo existente
export const createAuthenticatedClient = (token: string) => {
  console.log('游댏 [createAuthenticatedClient] Setting up context for token type:', token.startsWith('CART-') ? 'CART token' : 'Other token');
  
  // Em vez de criar nova inst칙ncia, configuramos o contexto
  setCartorioAuthContext(token);
  
  // Retorna a inst칙ncia 칰nica configurada
  return getAuthenticatedClient();
};

// Fun칞칫es de compatibilidade (mantidas para n칚o quebrar c칩digo existente)
export const setCustomAuthToken = (token: string) => {
  console.log('Setting custom auth token via compatibility function:', token);
  setCartorioAuthContext(token);
};

export const clearCustomAuthToken = () => {
  console.log('Clearing custom auth token via compatibility function');
  clearCartorioAuthContext();
};
