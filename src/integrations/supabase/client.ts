
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bnulocsnxiffavvabfdj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJudWxvY3NueGlmZmF2dmFiZmRqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzM1NTMsImV4cCI6MjA2NjQ0OTU1M30.3QeKQtbvTN4KQboUKhqOov16HZvz-xVLxmhl70S2IAE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false, // Disable default auth since we use custom tokens
    autoRefreshToken: false,
  },
  global: {
    headers: {},
  },
});

// Helper function to create authenticated supabase instance
export const createAuthenticatedClient = async (userToken?: string) => {
  console.log('üîê [createAuthenticatedClient] Creating authenticated client');
  
  try {
    // Get current session from Supabase Auth
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå [createAuthenticatedClient] Error getting session:', error);
      return supabase; // Return default client if session error
    }

    // If we have a valid Supabase session, use its access_token for Authorization header
    if (session?.access_token) {
      console.log('‚úÖ [createAuthenticatedClient] Using Supabase session access_token for Authorization header');
      
      const headers: Record<string, string> = {
        'Authorization': `Bearer ${session.access_token}` // Use USER's access_token, not ANON key
      };
      
      // If we have a custom token (CART-token), add it as custom header for RLS functions
      if (userToken && userToken.startsWith('CART-')) {
        headers['X-Custom-Auth'] = userToken;
        console.log('üè¢ [createAuthenticatedClient] Added custom auth header for cartorio');
      }
      
      return createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
        auth: {
          persistSession: false,
          autoRefreshToken: false,
        },
        global: {
          headers
        },
      });
    }
    
    console.log('‚ö†Ô∏è [createAuthenticatedClient] No valid session, returning default client');
    return supabase;
    
  } catch (err) {
    console.error('‚ùå [createAuthenticatedClient] Unexpected error:', err);
    return supabase;
  }
};

// Function to set custom JWT token for cartorio authentication
export const setCustomAuthToken = (token: string) => {
  console.log('Setting custom auth token:', token);
};

// Function to clear custom auth token
export const clearCustomAuthToken = () => {
  console.log('Clearing custom auth token');
};
