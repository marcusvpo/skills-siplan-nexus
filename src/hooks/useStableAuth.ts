import { useState, useEffect, useCallback, useRef } from 'react';
import { Session, User, AuthChangeEvent } from '@supabase/supabase-js';
import { supabase } from '@/integrations/supabase/client';
import { logger } from '@/utils/logger';

interface AuthState {
  session: Session | null;
  user: User | null;
  loading: boolean;
  isInitialized: boolean;
  isAdmin: boolean;
  error: string | null;
}

export const useStableAuth = () => {
  const [authState, setAuthState] = useState<AuthState>({
    session: null,
    user: null,
    loading: true, // Come√ßa como true para indicar que a verifica√ß√£o est√° em andamento
    isInitialized: false, // Come√ßa como false para indicar que a inicializa√ß√£o n√£o terminou
    isAdmin: false,
    error: null
  });

  const initializationRef = useRef(false); // Garante que a inicializa√ß√£o s√≥ aconte√ßa uma vez
  const listenerRef = useRef<any>(null); // Refer√™ncia para a inscri√ß√£o do listener

  // Fun√ß√£o para verificar status de admin com cache
  const checkAdminStatus = useCallback(async (user: User | null): Promise<boolean> => {
    if (!user?.email) {
      // Adicionado log para clareza
      logger.debug('üîç [useStableAuth] checkAdminStatus: Usu√°rio sem email, retornando false para admin.');
      return false;
    }

    const cacheKey = `admin_status_${user.email}`;
    const cached = sessionStorage.getItem(cacheKey);
    if (cached !== null) {
      logger.debug(`‚öôÔ∏è [useStableAuth] checkAdminStatus: Status admin para ${user.email} do cache: ${cached}`);
      return cached === 'true';
    }

    try {
      logger.debug(`üîç [useStableAuth] checkAdminStatus: Verificando status admin para ${user.email} no DB.`);
      const { data: adminData, error } = await supabase
        .from('admins')
        .select('id')
        .eq('email', user.email)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 √© 'Not found'
        logger.error('‚ùå [useStableAuth] Erro ao verificar status admin:', { error });
        return false;
      }

      const isAdmin = !!adminData;
      sessionStorage.setItem(cacheKey, isAdmin.toString()); // Salva no cache
      logger.debug(`‚úÖ [useStableAuth] checkAdminStatus: Status admin para ${user.email} do DB: ${isAdmin}`);
      return isAdmin;
    } catch (err) {
      logger.error('‚ùå [useStableAuth] Erro inesperado ao verificar admin:', { error: err });
      return false;
    }
  }, []);

  // Fun√ß√£o para validar se a sess√£o do Supabase ainda √© v√°lida
  const isSessionValid = useCallback((session: Session | null): boolean => {
    if (!session) return false;
    
    const now = Math.floor(Date.now() / 1000);
    const expiresAt = session.expires_at || 0;
    
    // Considera a sess√£o v√°lida se expira em mais de 5 minutos
    return expiresAt > (now + 300); 
  }, []);

  // Fun√ß√£o central para atualizar o estado de autentica√ß√£o de forma est√°vel
  const updateAuthState = useCallback(async (session: Session | null, source: string = 'unknown') => {
    logger.debug(`üîÑ [useStableAuth] Atualizando estado auth (source: ${source}):`, { hasSession: !!session });
    
    let currentSession = session;

    // Tenta refreshar a sess√£o se ela n√£o for v√°lida
    if (currentSession && !isSessionValid(currentSession)) {
      logger.debug('‚ö†Ô∏è [useStableAuth] Sess√£o expirada ou quase expirando, tentando refresh...');
      try {
        const { data, error } = await supabase.auth.refreshSession();
        if (!error && data.session) {
          currentSession = data.session;
          logger.debug('‚úÖ [useStableAuth] Sess√£o refreshada com sucesso.');
        } else {
          logger.warn('‚ùå [useStableAuth] Falha ao refreshar sess√£o, invalidando-a.', { error });
          currentSession = null; // Invalida a sess√£o se n√£o puder ser refreshada
        }
      } catch (err) {
        logger.error('‚ùå [useStableAuth] Erro ao refreshar sess√£o:', err);
        currentSession = null;
      }
    }
    
    const isAdmin = currentSession?.user ? await checkAdminStatus(currentSession.user) : false;
    logger.debug(`üéØ [useStableAuth] updateAuthState: isAdmin determinado: ${isAdmin} para usu√°rio email: ${currentSession?.user?.email || 'N/A'}`);

    const newState: AuthState = {
      session: currentSession,
      user: currentSession?.user || null,
      loading: false, // O processo de atualiza√ß√£o terminou, ent√£o n√£o est√° mais "carregando"
      isInitialized: true, // A inicializa√ß√£o do hook terminou
      isAdmin,
      error: null // Limpa qualquer erro anterior ap√≥s a atualiza√ß√£o
    };

    logger.debug('üìù [useStableAuth] Novo estado auth antes de setar:', {
      hasSession: !!newState.session,
      hasUser: !!newState.user,
      loading: newState.loading,
      isInitialized: newState.isInitialized,
      isAdmin: newState.isAdmin,
      source
    });

    setAuthState(newState);

    // Salva a sess√£o no localStorage apenas se ela for v√°lida
    if (currentSession && isSessionValid(currentSession)) {
      try {
        localStorage.setItem('supabase.auth.token', JSON.stringify(currentSession));
        logger.debug('üíæ [useStableAuth] Sess√£o Supabase salva no localStorage.');
      }  catch (error) {
        logger.error('‚ùå [useStableAuth] Erro ao salvar sess√£o no localStorage:', error);
      }
    } else {
      localStorage.removeItem('supabase.auth.token'); // Remove se a sess√£o n√£o √© v√°lida
      logger.debug('üóëÔ∏è [useStableAuth] Sess√£o Supabase removida do localStorage.');
    }
  }, [checkAdminStatus, isSessionValid]);

  // Efeito para a inicializa√ß√£o √∫nica e est√°vel do hook
  useEffect(() => {
    if (initializationRef.current) return; // Garante que s√≥ roda uma vez
    
    initializationRef.current = true;
    logger.info('üöÄ [useStableAuth] Iniciando verifica√ß√£o de autentica√ß√£o...');

    const initAuth = async () => {
      try {
        logger.debug('üîç [useStableAuth] Obtendo sess√£o do Supabase...');
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          logger.error('‚ùå [useStableAuth] Erro ao obter sess√£o inicial:', error);
          await updateAuthState(null, 'init-error');
          return;
        }

        logger.debug('‚úÖ [useStableAuth] Sess√£o inicial obtida:', { hasSession: !!session });
        await updateAuthState(session, 'init'); // Atualiza o estado com o session inicial

      } catch (error) {
        logger.error('‚ùå [useStableAuth] Erro durante a inicializa√ß√£o do auth:', error);
        await updateAuthState(null, 'init-exception');
      }
    };

    initAuth(); // Chama a fun√ß√£o de inicializa√ß√£o
  }, [updateAuthState]); // Depende de updateAuthState

  // Efeito para configurar o listener de mudan√ßas de autentica√ß√£o do Supabase
  useEffect(() => {
    // Garante que o listener s√≥ √© configurado se a inicializa√ß√£o j√° ocorreu e n√£o h√° um listener ativo
    if (!initializationRef.current || listenerRef.current) return;

    logger.info('üëÇ [useStableAuth] Configurando listener de mudan√ßas de autentica√ß√£o...');
    
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event: AuthChangeEvent, session: Session | null) => {
        logger.debug(`üîî [useStableAuth] Evento Auth recebido: ${event}`, { hasSession: !!session });
        // Sempre atualiza o estado em resposta a qualquer evento de autentica√ß√£o
        await updateAuthState(session, `event-${event}`);
      }
    );

    listenerRef.current = subscription; // Armazena a inscri√ß√£o do listener

    // Fun√ß√£o de limpeza para desinscrever o listener na desmontagem
    return () => {
      logger.info('üßπ [useStableAuth] Limpando listener de autentica√ß√£o.');
      subscription.unsubscribe();
      listenerRef.current = null;
    };
  }, [updateAuthState]); // Depende de updateAuthState

  // Fun√ß√£o para fazer logout do Supabase Auth nativo
  const logout = useCallback(async () => {
    try {
      logger.info('üö™ [useStableAuth] Realizando logout...');
      await supabase.auth.signOut();
      sessionStorage.clear(); // Limpa o cache de status de admin
      localStorage.removeItem('supabase.auth.token'); // Remove a sess√£o do localStorage
      logger.info('‚úÖ [useStableAuth] Logout conclu√≠do.');
    } catch (err) {
      logger.error('‚ùå [useStableAuth] Erro durante o logout:', { error: err });
    }
  }, []); // Sem depend√™ncias, pois apenas chama fun√ß√µes j√° est√°veis

  // Retorna o estado atual e a fun√ß√£o de logout
  return {
    ...authState,
    logout,
    updateAuthState // ESTA LINHA √â CR√çTICA! ELA ESTAVA FALTANDO.
  };
};